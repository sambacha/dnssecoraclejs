/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RSASHA256Algorithm,
  RSASHA256AlgorithmInterface,
} from "../RSASHA256Algorithm";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107a5806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de8f50a114610030575b600080fd5b61004361003e366004610592565b610059565b60405161005091906106e5565b60405180910390f35b600060608060006100a460048b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506102f79050565b60ff1690508015610170576100f960058261ffff168c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092949392505061032a9050565b92506101696101098260056106f3565b61ffff9081169060059061011f9085168d61072f565b610129919061072f565b8c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092949392505061032a9050565b9150610229565b6101b460058b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506103ba9050565b905061020060078261ffff168c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092949392505061032a9050565b92506102266102108260076106f3565b61ffff9081169060079061011f9085168d61072f565b91505b6000606061026e84868a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103e292505050565b90925090508180156102e757506102936020825161028c919061072f565b82906103fd565b60028b8b6040516102a5929190610678565b602060405180830381855afa1580156102c2573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906102e5919061056c565b145b9c9b505050505050505050505050565b600082828151811061031957634e487b7160e01b600052603260045260246000fd5b016020015160f81c90505b92915050565b8251606090610339838561071c565b111561034457600080fd5b60008267ffffffffffffffff81111561036d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610397576020820181803683370190505b509050602080820190868601016103af828287610421565b509095945050505050565b81516000906103ca83600261071c565b11156103d557600080fd5b50016002015161ffff1690565b600060606103f1838587610477565b91509150935093915050565b815160009061040d83602061071c565b111561041857600080fd5b50016020015190565b60208110610459578151835261043860208461071c565b925061044560208361071c565b915061045260208261072f565b9050610421565b905182516020929092036101000a6000190180199091169116179052565b60006060600085518551855188888860405160200161049b96959493929190610685565b6040516020818303038152906040529050835167ffffffffffffffff8111156104d457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156104fe576020820181803683370190505b50915083516020830182516020840160055afa925050935093915050565b8051610324565b60008083601f84011261053557600080fd5b50813567ffffffffffffffff81111561054d57600080fd5b60208301915083600182028301111561056557600080fd5b9250929050565b60006020828403121561057e57600080fd5b600061058a848461051c565b949350505050565b600080600080600080606087890312156105ab57600080fd5b863567ffffffffffffffff8111156105c257600080fd5b6105ce89828a01610523565b9650965050602087013567ffffffffffffffff8111156105ed57600080fd5b6105f989828a01610523565b9450945050604087013567ffffffffffffffff81111561061857600080fd5b61062489828a01610523565b92509250509295509295509295565b8015155b82525050565b600061064a838584610746565b50500190565b600061065a825190565b610668818560208601610752565b9290920192915050565b80610637565b600061058a82848661063d565b60006106918289610672565b6020820191506106a18288610672565b6020820191506106b18287610672565b6020820191506106c18286610650565b91506106cd8285610650565b91506106d98284610650565b98975050505050505050565b602081016103248284610633565b600061ffff8216915061ffff831692508261ffff0382111561071757610717610782565b500190565b6000821982111561071757610717610782565b60008282101561074157610741610782565b500390565b82818337506000910152565b60005b8381101561076d578181015183820152602001610755565b8381111561077c576000848401525b50505050565b634e487b7160e01b600052601160045260246000fdfea164736f6c6343000804000a";

type RSASHA256AlgorithmConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RSASHA256AlgorithmConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RSASHA256Algorithm__factory extends ContractFactory {
  constructor(...args: RSASHA256AlgorithmConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RSASHA256Algorithm> {
    return super.deploy(overrides || {}) as Promise<RSASHA256Algorithm>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RSASHA256Algorithm {
    return super.attach(address) as RSASHA256Algorithm;
  }
  connect(signer: Signer): RSASHA256Algorithm__factory {
    return super.connect(signer) as RSASHA256Algorithm__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RSASHA256AlgorithmInterface {
    return new utils.Interface(_abi) as RSASHA256AlgorithmInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RSASHA256Algorithm {
    return new Contract(address, _abi, signerOrProvider) as RSASHA256Algorithm;
  }
}
