/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DummyAlgorithm,
  DummyAlgorithmInterface,
} from "../DummyAlgorithm";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610155806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de8f50a114610030575b600080fd5b61004a61003e3660046100a7565b60019695505050505050565b604051901515815260200160405180910390f35b60008083601f84011261007057600080fd5b50813567ffffffffffffffff81111561008857600080fd5b6020830191508360018202830111156100a057600080fd5b9250929050565b600080600080600080606087890312156100c057600080fd5b863567ffffffffffffffff8111156100d757600080fd5b6100e389828a0161005e565b9650965050602087013567ffffffffffffffff81111561010257600080fd5b61010e89828a0161005e565b9450945050604087013567ffffffffffffffff81111561012d57600080fd5b61013989828a0161005e565b9250925050929550929550929556fea164736f6c6343000804000a";

type DummyAlgorithmConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyAlgorithmConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DummyAlgorithm__factory extends ContractFactory {
  constructor(...args: DummyAlgorithmConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DummyAlgorithm> {
    return super.deploy(overrides || {}) as Promise<DummyAlgorithm>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DummyAlgorithm {
    return super.attach(address) as DummyAlgorithm;
  }
  connect(signer: Signer): DummyAlgorithm__factory {
    return super.connect(signer) as DummyAlgorithm__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyAlgorithmInterface {
    return new utils.Interface(_abi) as DummyAlgorithmInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyAlgorithm {
    return new Contract(address, _abi, signerOrProvider) as DummyAlgorithm;
  }
}
